{"version":3,"sources":["YouTube/youtube.module.css","YouTube/Youtube.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","q","a","encodeURIComponent","fetch","method","headers","response","json","body","console","log","items","filter","item","type","App","React","useState","query","setQuery","list","setList","className","onSubmit","e","preventDefault","searchYouTube","then","autoFocus","value","onChange","target","length","map","key","id","href","link","title","description","author","ref","name","views","duration","uploaded_at","alt","src","thumbnail","Youtube","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2KACAA,EAAOC,QAAU,CAAC,IAAM,qBAAqB,MAAQ,uBAAuB,KAAO,sBAAsB,KAAO,wB,kLCGhH,WAA6BC,GAA7B,iBAAAC,EAAA,6DACED,EAAIE,mBAAmBF,GADzB,SAEyBG,MACrB,mEAAqEH,EACrE,CACEI,OAAQ,MACRC,QAAS,CACP,kBAAmB,wCACnB,iBAAkB,wDAR1B,cAEQC,EAFR,gBAYqBA,EAASC,OAZ9B,cAYQC,EAZR,OAaEC,QAAQC,IAAIF,GAbd,kBAcSA,EAAKG,MAAMC,QAAO,SAACC,GAAD,MAAwB,UAAdA,EAAKC,SAd1C,4C,sBAkEeC,MAjDf,WAAgB,IAAD,EACaC,IAAMC,SAAS,kBAD5B,mBACNC,EADM,KACCC,EADD,OAEWH,IAAMC,SAAS,MAF1B,mBAENG,EAFM,KAEAC,EAFA,KASb,OACE,yBAAKC,UAAU,OACb,0BAAMC,SAPK,SAACC,GACdA,EAAEC,iB,2CACFC,CAAcR,GAAOS,KAAKN,KAMtB,2BACEO,WAAS,EACTC,MAAOX,EACPY,SAAU,SAACN,GAAD,OAAOL,EAASK,EAAEO,OAAOF,UAErC,mDAEDT,IACkB,IAAhBA,EAAKY,OACJ,yCAEA,wBAAIV,UAAU,SACXF,EAAKa,KAAI,SAACpB,GAAD,OACR,wBAAIS,UAAU,OAAOY,IAAKrB,EAAKsB,IAC7B,6BACE,2BACE,uBAAGC,KAAMvB,EAAKwB,MAAOxB,EAAKyB,QAE5B,2BAAIzB,EAAK0B,cAEX,wBAAIjB,UAAU,QACZ,mCACM,uBAAGc,KAAMvB,EAAK2B,OAAOC,KAAM5B,EAAK2B,OAAOE,OAE7C,sCAAY7B,EAAK8B,OACjB,yCAAe9B,EAAK+B,UACpB,yCAAe/B,EAAKgC,cAEtB,yBAAKC,IAAI,GAAGC,IAAKlC,EAAKmC,oBCjDvBjC,G,MARH,WACV,OACE,6BACE,kBAACkC,EAAD,SCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzD,QAAQyD,MAAMA,EAAMC,c","file":"static/js/main.59ab2183.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"youtube_app__2DNvw\",\"items\":\"youtube_items__12Ccg\",\"item\":\"youtube_item__1rjH6\",\"meta\":\"youtube_meta__3Myju\"};","import React from \"react\";\n\nimport \"./youtube.module.css\";\n\nasync function searchYouTube(q) {\n  q = encodeURIComponent(q);\n  const response = await fetch(\n    \"https://youtube-search-results.p.rapidapi.com/youtube-search/?q=\" + q,\n    {\n      method: \"GET\",\n      headers: {\n        \"x-rapidapi-host\": \"youtube-search-results.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"b54663a5e6msh64cb43d3524bb21p186d22jsnb6eb1989079a\",\n      },\n    }\n  );\n  const body = await response.json();\n  console.log(body);\n  return body.items.filter((item) => item.type === \"video\");\n}\n\nfunction App() {\n  const [query, setQuery] = React.useState(\"React tutorial\");\n  const [list, setList] = React.useState(null);\n\n  const search = (e) => {\n    e.preventDefault();\n    searchYouTube(query).then(setList);\n  };\n\n  return (\n    <div className=\"app\">\n      <form onSubmit={search}>\n        <input\n          autoFocus\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n        />\n        <button>Search YouTube</button>\n      </form>\n      {list &&\n        (list.length === 0 ? (\n          <p>No results</p>\n        ) : (\n          <ul className=\"items\">\n            {list.map((item) => (\n              <li className=\"item\" key={item.id}>\n                <div>\n                  <b>\n                    <a href={item.link}>{item.title}</a>\n                  </b>\n                  <p>{item.description}</p>\n                </div>\n                <ul className=\"meta\">\n                  <li>\n                    By: <a href={item.author.ref}>{item.author.name}</a>\n                  </li>\n                  <li>Views: {item.views}</li>\n                  <li>Duration: {item.duration}</li>\n                  <li>Uploaded: {item.uploaded_at}</li>\n                </ul>\n                <img alt=\"\" src={item.thumbnail} />\n              </li>\n            ))}\n          </ul>\n        ))}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport Youtube from \"./YouTube/Youtube\";\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <div>\n      <Youtube />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}